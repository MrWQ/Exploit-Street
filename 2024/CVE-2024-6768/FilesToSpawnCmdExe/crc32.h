// crc32.h
#pragma once

class Crc32
{
public:
    Crc32(unsigned int poly)
    {
        for (int i = 0; i < 256; ++i)
        {
            unsigned int fwd = i, rev = i << 24;
            for (int j = 8; j > 0; --j)
            {
                if (fwd & 1) fwd = (fwd >> 1) ^ poly;
                else fwd >>= 1;
                forward[i] = fwd & 0xffffffff;
                if ((rev & 0x80000000) == 0x80000000) rev = ((rev ^ poly) << 1) | 1;
                else rev <<= 1;
                rev &= 0xffffffff;
                reverse[i] = rev;
            }
        }
    }

    unsigned int Compute(const unsigned char *buf, int len)
    {
        unsigned int crc = 0xffffffff;

        for (int i = 0; i < len; ++i)
            crc = (crc >> 8) ^ forward[(crc ^ buf[i]) & 0xff];

        return crc ^ 0xffffffff;
    }

    void Forge(unsigned int target, unsigned char *buf, int len, int pos)
    {
        unsigned int fwd_crc = 0xffffffff;
        for (int i = 0; i < pos; ++i)
            fwd_crc = (fwd_crc >> 8) ^ forward[(fwd_crc ^ buf[i]) & 0xff];

        *(unsigned int *)&buf[pos] = fwd_crc;
 
        unsigned int bkd_crc = target ^ 0xffffffff;
        for (int i = len - 1; i >= pos; --i)
            bkd_crc = ((bkd_crc << 8) & 0xffffffff) ^ reverse[bkd_crc >> 24] ^ buf[i];

        *(unsigned int *)&buf[pos] = bkd_crc;
    }

private:
    unsigned int forward[256];
    unsigned int reverse[256];
};